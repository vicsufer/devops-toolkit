trigger:
  branches:
    include:
    - master
    - staging
pr:
  autoCancel: true
  branches:
    include:
      - master
      - staging

resources:
- repo: self

variables:
# Load environment dependent variables from variable groups, those variables are:
#   containerRegistry
#   dockerRegistryServiceConnection
#   env
#   kubernetes-service-connection
- ${{ if eq(variables['build.SourceBranchName'], 'master') }}:
  - group: "vargroup-production"
- ${{ if eq(variables['build.SourceBranchName'], 'staging') }}:
  - group: "vargroup-staging"
- ${{ if and( ne(variables['build.SourceBranchName'],'master'), ne(variables['build.SourceBranchName'],'staging')) }}:
  - group: "vargroup-develop"
- name: imageRepository
  value: <IMAGE_REPOSITORY_NAME>
- name: dockerfilePath 
  value: '**/Dockerfile'
- name: deploymentName
  value: <DEPLOYMENT_NAME>
- name: deploymentNamespace
  value: <NAMESPACE>
- name: tag
  value: '$(Build.SourceVersion)'
# Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'

stages:
- stage: Test
  displayName: Test
  dependsOn: Preparations
  condition: succeeded()
  jobs:   
  - job: Test
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build test image
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        buildContext: '$(Build.Repository.LocalPath)' 
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --target test
        tags: |
          $(tag)
    - bash: 'docker run -e NODE_ENV=test $(containerRegistry)/$(imageRepository):$(tag) npm run lint'
      displayName: 'Run linters'
    - bash: 'docker run -v $(System.DefaultWorkingDirectory)/coverage/:/app/coverage/ -v $(System.DefaultWorkingDirectory)/reports/:/app/reports/ -e NODE_ENV=test $(containerRegistry)/$(imageRepository):$(tag) npm run-script test:report'
      displayName: 'Run tests'
    - task: PublishTestResults@1
      displayName: 'Publish test report'
      inputs:
        testResultsFiles: $(System.DefaultWorkingDirectory)/reports/junit.xml
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish coverage report'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        failIfCoverageEmpty: true
   
- stage: Build
  displayName: Build release 
  dependsOn: Test
  # Only build iamges for release branches, and when they are not triggered from PRs
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:   
  - job: buildRelease
    displayName: Build Release
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build release
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        buildContext: '$(Build.Repository.LocalPath)' 
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --target release
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Push release to ACR
      inputs:
        command: push
        dockerfile: $(dockerfilePath)
        buildContext: '$(Build.Repository.LocalPath)' 
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    #This is for triggering kubernetes deployment, otherwise it deployment stage fails.
    - task: PublishPipelineArtifact@1 
      displayName: 'Publish Artifact: drop'
      

- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: k8s-$(env)
    pool:
      vmImage: $(vmImageName)
    strategy: 
      runOnce:
        deploy: 
          steps:
          - task: Kubernetes@1
            displayName: Test kubernetes deploy
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(kubernetes-service-connection)
              namespace: $(deploymentNamespace)
              command: set 
              arguments: image deployment/$(deploymentName) $(deploymentName)=$(containerRegistry)/$(imageRepository):$(Build.SourceVersion) --record=true --dry-run
          - task: Kubernetes@1
            displayName: Deploy image to kubernetes
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: $(kubernetes-service-connection)
              namespace: $(deploymentNamespace)
              command: set 
              arguments: image deployment/$(deploymentName) $(deploymentName)=$(containerRegistry)/$(imageRepository):$(Build.SourceVersion) --record=true
